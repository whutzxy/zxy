fid = fopen('no_leg_atn_1.bin'); %读入图像数据
x = fread(fid,inf,'float');
x=reshape(x,[512,512,100]);
fclose(fid);
xtrue=x(:,:,65)*600;
clim=[63 113];
view=180;
view1=180;
% 设定投影几何参数sg
sg = sino_geom('fan','nb', 672, 'na',view, 'ds', 1.40, ...
    'dsd', 1040, 'dso',570 ,'dfs',0, ...
    'strip_width','d','source_offset',0,'channel_offset',0,'orbit',360, 'down', 1);%0.909976
sg1 = sino_geom('fan','nb', 672, 'na',view1, 'ds', 1.40, ...
    'dsd', 1040, 'dso',570 ,'dfs',0, ...
    'strip_width','d','source_offset',0,'channel_offset',0,'orbit',360, 'down', 1);
% fan (扇束) nb(探测器个数) na(旋转一周采样角个数) ds(偏转距离) dsd(源到探测器的距离) orbit(旋转角度) down(降采样比例) 
% 设定图像几何参数ig
ig = image_geom('nx',512, 'ny', 512,'dx',1.17, 'offset_x',0,'down', 1);
% nx, ny(重建图像大小) dx(像素大小)
ig.mask = conv2(double6(xtrue > 0), ones(3), 'same') > 0;%二维卷积
% 生成系统矩阵G
G = Gtomo2_strip(sg,ig);% windows下可运行，数据量不能过大 % fessler
G1 = Gtomo2_strip(sg1,ig);
sino=G*xtrue;
sino1=G1*xtrue;
% figure,imagesc(sino);
%% low_dose and sparse-view simulation  低剂量和稀疏视图模拟

kappa=5e3;%设定一个归一化参数 
sino_new = sino/kappa;%归一化   表示归一化后的投影数据
sino_new1 = sino1/kappa;
max(sino_new(:))%调整kappa,保证最大值在6-7之间
max(sino_new1(:))
bi=1e6;%设定入射光子数,光子数越小，剂量越低
ri = 0.1; %偏移量，可设置为0
yb = bi.*exp(-sino_new) + ri; % 指数变换，得到raw data 
yb1 = bi.*exp(-sino_new1) + ri;
yi = poisson(yb) + 10*randn(size(yb)); %仿真噪声，泊松分布量子噪声+正态分布电子噪声
yi1 = poisson(yb1) + 10*randn(size(yb1));
li_hat = -log((yi-ri)./bi); % 对数变换 
li_hat1 = -log((yi1-ri)./bi);
li_hat(yi-ri <= 0) = 0; % 非负
li_hat(yi1-ri <= 0) = 0; 
sino_noise = kappa*li_hat; % 去归一化
sino_noise1 = kappa*li_hat1;

tmp = fbp2(sg, ig);
tmp1 = fbp2(sg1, ig);
xfbp_noise = fbp2(sino_noise, tmp);% fbp方法重建做初值 
xfbp_noise1 = fbp2(sino_noise1, tmp1);
%figure,imshow(xfbp_noise',clim);

Im_noise=double(xfbp_noise1);%转换精度
iter=200;
dt=1; % constant step size 恒定步长
 %beta=0;% 惩罚因子
 beta=4;
Im_pwls_tv=pwls_piccs(Im_noise,0,sino_noise,0, G,beta,dt,iter);
